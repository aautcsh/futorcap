##
# This is the core of a trust-based cryptographic primitive for encrypting a
# message with a key that will not be released until a certian time. Key pairs
# are generated by the server at intervals. Pubkeys are released immediately,
# while privkeys are held for a period before being published.
# 
# Requires GPG or some other key-generating tool.
#
# Files (relative to datadir provided in argv[1]):
#   keys/   contains all keys
#       2014-02-12_14-49-10_UTC.pub     pubkey (timestamp of release)
#       2014-02-12_14-49-10_UTC.priv    privkey (timestamp of release)
#   pub/    contains published keys
#   conf    config file
#       [timing]    section with release timing stuff
#       period = 60     seconds between pubkey and privkey release
#       interval = 10   seconds between keypairs
#
# TODO: Time source is very important. Use GPS.

import configparser, time, os, datetime

if __name__ == "__main__":

    #load config
    datadir = sys.argv[1] if len(sys.argv) > 1 else "."
    dd = lambda path: os.path.join(datadir, path)
    conf = configparser.ConfigParser()
    conf.load([dd("conf")])

    #verify current time
    time = time.time()
    #yes, this is cheating

    #uppdate contents of pub directory
    def updatepub():
        pubdir = dd("pub")
        pubdirlist = os.listdir(pubdir)
        keydir = dd("keys")
        for fname in os.listdir(keydir):
            #copy any missing pubkeys to pub directory
            #copy any ready and missing privkeys to pub directory
            #maybe remove really old keys from keydir
    updatepub()

    #calculate timestamps of keys to generate.
    #find oldest existing key and work backwards.
    #if no existing key, start at now+period

    #starting with soonest key, generate new key pairs,
    #between each pair, updatepub()
