##
# This is the core of a trust-based cryptographic primitive for encrypting a
# message with a key that will not be released until a certian time. Key pairs
# are generated by the server at intervals. Pubkeys are released immediately,
# while privkeys are held for a period before being published.
# 
# Requires GPG, OpenSSL, or some other key-generating tool.
#
# Files (relative to datadir provided in argv[1]):
#   keys/   contains all keys
#       2014-02-12_14-49-10_UTC.type.pub    pubkey (timestamp of release)
#       2014-02-12_14-49-10_UTC.type.priv   privkey (timestamp of release)
#   pub/    contains published keys
#   conf    config file -- we trust data from this file!
#       [timing]    section with release timing stuff
#       period = 60     seconds between pubkey and privkey release
#       interval = 10   seconds between keypairs
#       [generation]    section with key generation module stuff
#       modules = openssl   semicolon-separated keygen module list
#       [generate_openssl]  keygen-specific configurations
#       bits = 2048
#
# TODO: Time source is very important. Use GPS.

import configparser, time, os, datetime, shutil

tsformat = "%Y-%m-%d_%H-%M-%S_%Z"
tslen = 23

def getkeytime(fname):
    return datetime.strptime(fname[:tslen], tsformat)

def maketimestamp(t):
    ts = time.strftime("%Y-%m-%d_%H-%M-%S_%Z", time.gmtime(t))
    ts.replace("_GMT", "_UTC")
    return t

def getcurtime():
    return time.time() #yes, this is cheating

def genwithmodule(name, conf, pubfname, privfname):
    module = __import__(name)
    sect = "generate_" + name
    args = {key: conf.get(sect, key) for key in conf.options(sect)}
    args.update({"pubfname": pubfname, "privfname": privfname})
    print(args)
    module.generate(**args)

##
# Read keypairs available in directory
# return a dict of key timestamps and types
def getkeypairlist(keydir):
    for fname in os.listdir(keydir)

if __name__ == "__main__":

    #load config
    datadir = sys.argv[1] if len(sys.argv) > 1 else "."
    sys.path.insert(0, datadir) #we import modules from here
    dd = lambda path: os.path.join(datadir, path)
    conf = configparser.ConfigParser()
    conf.load([dd("conf")])

    curtime = getcurtime()

    pubdir = dd("pub")
    keydir = dd("keys")
    #update contents of pub directory
    def updatepub():
        for fname in os.listdir(keydir):
            if not os.path.exists(os.path.join(pubdir, fname):
                #copy any missing pubkeys to pub directory
                if fname.endswith(".pub"):
                    shutil.copy(fname, pubdir)
                #copy any ready and missing privkeys to pub directory
                elif fname.endswith(".priv"):
                    t = getkeytime(fname)
                    if t >= curtime:
                        shutil.copy(fname, pubdir)
            #TODO: maybe remove really old keys from keydir
    updatepub(curtime)

    #calculate timestamps of keys to generate.
    #find oldest existing key and work backwards.
    #if no existing key, start at now+period
    period = conf.get("timing", "period")
    interval = conf.get("timing", "interval")
    earliestkey = curtime + period
    for fname in os.listdir(keydir):
        #TODO: make sure both pub and privkeys are present for each pair
        keytime = getkeytime(fname)
        if keytime < earliestkey:
            earliestkey = keytime

    #TODO: this loop is error-prone and needs to be checked for bugs
    togenerate = []
    while earliestkey-interval > curtime:
        togenerate.insert(0, earliestkey - interval)
        earliestkey -= interval

    #starting with soonest key, generate new key pairs,
    #between each pair, updatepub()
    #be careful as this approach exposes approximate key generation times!
    keygens = conf.get("generation", "modules").split(";")
    keygens = [k.strip(" ") for k in keygens]
    for keytime in togenerate:
        for keygen in keygens:
            ts = maketimestamp(keytime)
            pubfname = os.path.join(keydir, "{}.{}.pub".format(ts, keygen))
            privfname = os.path.join(keydir, "{}.{}.priv".format(ts, keygen))
            genwithmodule(keygen, conf, pubfname, privfname)
        curtime = getcurtime()
        updatepub(curtime)
